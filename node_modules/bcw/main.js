import inquirer from "inquirer";
import fs from "fs";

const templates = fs.readdirSync(`${__dirname}/templates`);
const CURR_DIR = process.cwd();

//prompts and the name of properties added to the answers object
const prompts = [
  {
    name: "project-choice",
    type: "list",
    message: "What project template would you like to generate?",
    choices: templates
  },
  {
    name: "project-name",
    type: "input",
    message: "Project name:",
    validate: function(input) {
      if (/^([A-Za-z\-\_\d])+$/.test(input)) return true;
      else
        return "Project name may only include letters, numbers, underscores and hashes.";
    }
  }
];

inquirer.prompt(prompts).then(answers => {
  const projectChoice = answers["project-choice"];
  const projectName = answers["project-name"];
  const templatePath = `${__dirname}/templates/${projectChoice}`;
  const projPath = `${CURR_DIR}/${projectName}`;
  fs.mkdirSync(`${CURR_DIR}/${projectName}`);

  createDirectoryContents(templatePath, projectName);

  console.log("Loading...");
  console.log("");
  if (!projectChoice.toString().includes("Server")) {
    return console.log(`cd into ${projectName} to begin`);
  }
  fs.writeFileSync(
    `${projPath}/.gitignore`,
    `
            node_modules
            .env
            `,
    "utf8"
  );
  var exec = require("child_process").exec;
  exec(`npm run --prefix ${projPath} setup`, (err, output) => {
    if (err) {
      console.error(err);
    }
    console.log(`cd into ${projectName} to begin`);
    fs.unlinkSync(`${projPath}/semver`);
    fs.unlinkSync(`${projPath}/mime`);
    fs.unlinkSync(`${projPath}/semver.cmd`);
    fs.unlinkSync(`${projPath}/mime.cmd`);
  });
});

function createDirectoryContents(templatePath, newProjectPath) {
  const filesToCreate = fs.readdirSync(templatePath);

  filesToCreate.forEach(file => {
    const origFilePath = `${templatePath}/${file}`;
    const stats = fs.statSync(origFilePath);

    if (stats.isFile()) {
      const contents = fs.readFileSync(origFilePath, "utf8");
      let writePath = `${CURR_DIR}/${newProjectPath}/${file}`;
      fs.writeFileSync(writePath, contents, "utf8");
    } else if (stats.isDirectory()) {
      fs.mkdirSync(`${CURR_DIR}/${newProjectPath}/${file}`);

      // recursive call
      createDirectoryContents(
        `${templatePath}/${file}`,
        `${newProjectPath}/${file}`
      );
    }
  });
}
